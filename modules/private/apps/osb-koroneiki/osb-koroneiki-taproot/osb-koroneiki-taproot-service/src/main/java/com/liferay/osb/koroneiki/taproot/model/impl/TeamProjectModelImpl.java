/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.liferay.osb.koroneiki.taproot.model.impl;

import com.liferay.osb.koroneiki.taproot.model.TeamProject;
import com.liferay.osb.koroneiki.taproot.model.TeamProjectModel;
import com.liferay.osb.koroneiki.taproot.model.TeamProjectSoap;
import com.liferay.osb.koroneiki.taproot.service.persistence.TeamProjectPK;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the TeamProject service. Represents a row in the &quot;Koroneiki_TeamProject&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>TeamProjectModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TeamProjectImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TeamProjectImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TeamProjectModelImpl
	extends BaseModelImpl<TeamProject> implements TeamProjectModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a team project model instance should use the <code>TeamProject</code> interface instead.
	 */
	public static final String TABLE_NAME = "Koroneiki_TeamProject";

	public static final Object[][] TABLE_COLUMNS = {
		{"teamId", Types.BIGINT}, {"projectId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("teamId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Koroneiki_TeamProject (teamId LONG not null,projectId LONG not null,primary key (teamId, projectId))";

	public static final String TABLE_SQL_DROP =
		"drop table Koroneiki_TeamProject";

	public static final String ORDER_BY_JPQL =
		" ORDER BY teamProject.id.teamId ASC, teamProject.id.projectId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Koroneiki_TeamProject.teamId ASC, Koroneiki_TeamProject.projectId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TeamProject toModel(TeamProjectSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TeamProject model = new TeamProjectImpl();

		model.setTeamId(soapModel.getTeamId());
		model.setProjectId(soapModel.getProjectId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TeamProject> toModels(TeamProjectSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TeamProject> models = new ArrayList<TeamProject>(
			soapModels.length);

		for (TeamProjectSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public TeamProjectModelImpl() {
	}

	@Override
	public TeamProjectPK getPrimaryKey() {
		return new TeamProjectPK(_teamId, _projectId);
	}

	@Override
	public void setPrimaryKey(TeamProjectPK primaryKey) {
		setTeamId(primaryKey.teamId);
		setProjectId(primaryKey.projectId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new TeamProjectPK(_teamId, _projectId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((TeamProjectPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return TeamProject.class;
	}

	@Override
	public String getModelClassName() {
		return TeamProject.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TeamProject, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TeamProject, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TeamProject, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((TeamProject)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TeamProject, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TeamProject, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TeamProject)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TeamProject, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TeamProject, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<TeamProject, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<TeamProject, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<TeamProject, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<TeamProject, Object>>();
		Map<String, BiConsumer<TeamProject, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<TeamProject, ?>>();

		attributeGetterFunctions.put("teamId", TeamProject::getTeamId);
		attributeSetterBiConsumers.put(
			"teamId", (BiConsumer<TeamProject, Long>)TeamProject::setTeamId);
		attributeGetterFunctions.put("projectId", TeamProject::getProjectId);
		attributeSetterBiConsumers.put(
			"projectId",
			(BiConsumer<TeamProject, Long>)TeamProject::setProjectId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getTeamId() {
		return _teamId;
	}

	@Override
	public void setTeamId(long teamId) {
		_teamId = teamId;
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_projectId = projectId;
	}

	@Override
	public TeamProject toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TeamProject)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TeamProjectImpl teamProjectImpl = new TeamProjectImpl();

		teamProjectImpl.setTeamId(getTeamId());
		teamProjectImpl.setProjectId(getProjectId());

		teamProjectImpl.resetOriginalValues();

		return teamProjectImpl;
	}

	@Override
	public int compareTo(TeamProject teamProject) {
		TeamProjectPK primaryKey = teamProject.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TeamProject)) {
			return false;
		}

		TeamProject teamProject = (TeamProject)obj;

		TeamProjectPK primaryKey = teamProject.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<TeamProject> toCacheModel() {
		TeamProjectCacheModel teamProjectCacheModel =
			new TeamProjectCacheModel();

		teamProjectCacheModel.teamProjectPK = getPrimaryKey();

		teamProjectCacheModel.teamId = getTeamId();

		teamProjectCacheModel.projectId = getProjectId();

		return teamProjectCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TeamProject, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TeamProject, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TeamProject, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((TeamProject)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<TeamProject, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<TeamProject, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TeamProject, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((TeamProject)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		TeamProject.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		TeamProject.class, ModelWrapper.class
	};
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _teamId;
	private long _projectId;
	private TeamProject _escapedModel;

}