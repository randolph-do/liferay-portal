/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.liferay.osb.koroneiki.root.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.osb.koroneiki.root.model.ExternalIdMapper;
import com.liferay.osb.koroneiki.root.model.ExternalIdMapperModel;
import com.liferay.osb.koroneiki.root.model.ExternalIdMapperSoap;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ExternalIdMapper service. Represents a row in the &quot;Koroneiki_ExternalIdMapper&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ExternalIdMapperModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExternalIdMapperImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ExternalIdMapperImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ExternalIdMapperModelImpl
	extends BaseModelImpl<ExternalIdMapper> implements ExternalIdMapperModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a external ID mapper model instance should use the <code>ExternalIdMapper</code> interface instead.
	 */
	public static final String TABLE_NAME = "Koroneiki_ExternalIdMapper";

	public static final Object[][] TABLE_COLUMNS = {
		{"externalIdMapperId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"classNameId", Types.BIGINT}, {"classPK", Types.BIGINT},
		{"externalSource", Types.INTEGER}, {"externalId", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("externalIdMapperId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("classNameId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("classPK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("externalSource", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("externalId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Koroneiki_ExternalIdMapper (externalIdMapperId LONG not null primary key,companyId LONG,createDate DATE null,modifiedDate DATE null,classNameId LONG,classPK LONG,externalSource INTEGER,externalId VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table Koroneiki_ExternalIdMapper";

	public static final String ORDER_BY_JPQL =
		" ORDER BY externalIdMapper.externalIdMapperId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Koroneiki_ExternalIdMapper.externalIdMapperId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ExternalIdMapper toModel(ExternalIdMapperSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ExternalIdMapper model = new ExternalIdMapperImpl();

		model.setExternalIdMapperId(soapModel.getExternalIdMapperId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setClassNameId(soapModel.getClassNameId());
		model.setClassPK(soapModel.getClassPK());
		model.setExternalSource(soapModel.getExternalSource());
		model.setExternalId(soapModel.getExternalId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ExternalIdMapper> toModels(
		ExternalIdMapperSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<ExternalIdMapper> models = new ArrayList<ExternalIdMapper>(
			soapModels.length);

		for (ExternalIdMapperSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ExternalIdMapperModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _externalIdMapperId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setExternalIdMapperId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _externalIdMapperId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ExternalIdMapper.class;
	}

	@Override
	public String getModelClassName() {
		return ExternalIdMapper.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ExternalIdMapper, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ExternalIdMapper, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ExternalIdMapper, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ExternalIdMapper)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ExternalIdMapper, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ExternalIdMapper, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ExternalIdMapper)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ExternalIdMapper, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ExternalIdMapper, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<ExternalIdMapper, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ExternalIdMapper, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ExternalIdMapper, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<ExternalIdMapper, Object>>();
		Map<String, BiConsumer<ExternalIdMapper, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<ExternalIdMapper, ?>>();

		attributeGetterFunctions.put(
			"externalIdMapperId", ExternalIdMapper::getExternalIdMapperId);
		attributeSetterBiConsumers.put(
			"externalIdMapperId",
			(BiConsumer<ExternalIdMapper, Long>)
				ExternalIdMapper::setExternalIdMapperId);
		attributeGetterFunctions.put(
			"companyId", ExternalIdMapper::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<ExternalIdMapper, Long>)ExternalIdMapper::setCompanyId);
		attributeGetterFunctions.put(
			"createDate", ExternalIdMapper::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<ExternalIdMapper, Date>)
				ExternalIdMapper::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", ExternalIdMapper::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<ExternalIdMapper, Date>)
				ExternalIdMapper::setModifiedDate);
		attributeGetterFunctions.put(
			"classNameId", ExternalIdMapper::getClassNameId);
		attributeSetterBiConsumers.put(
			"classNameId",
			(BiConsumer<ExternalIdMapper, Long>)
				ExternalIdMapper::setClassNameId);
		attributeGetterFunctions.put("classPK", ExternalIdMapper::getClassPK);
		attributeSetterBiConsumers.put(
			"classPK",
			(BiConsumer<ExternalIdMapper, Long>)ExternalIdMapper::setClassPK);
		attributeGetterFunctions.put(
			"externalSource", ExternalIdMapper::getExternalSource);
		attributeSetterBiConsumers.put(
			"externalSource",
			(BiConsumer<ExternalIdMapper, Integer>)
				ExternalIdMapper::setExternalSource);
		attributeGetterFunctions.put(
			"externalId", ExternalIdMapper::getExternalId);
		attributeSetterBiConsumers.put(
			"externalId",
			(BiConsumer<ExternalIdMapper, String>)
				ExternalIdMapper::setExternalId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getExternalIdMapperId() {
		return _externalIdMapperId;
	}

	@Override
	public void setExternalIdMapperId(long externalIdMapperId) {
		_externalIdMapperId = externalIdMapperId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return "";
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@JSON
	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		_classNameId = classNameId;
	}

	@JSON
	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_classPK = classPK;
	}

	@JSON
	@Override
	public int getExternalSource() {
		return _externalSource;
	}

	@Override
	public void setExternalSource(int externalSource) {
		_externalSource = externalSource;
	}

	@JSON
	@Override
	public String getExternalId() {
		if (_externalId == null) {
			return "";
		}
		else {
			return _externalId;
		}
	}

	@Override
	public void setExternalId(String externalId) {
		_externalId = externalId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ExternalIdMapper.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ExternalIdMapper toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ExternalIdMapper)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ExternalIdMapperImpl externalIdMapperImpl = new ExternalIdMapperImpl();

		externalIdMapperImpl.setExternalIdMapperId(getExternalIdMapperId());
		externalIdMapperImpl.setCompanyId(getCompanyId());
		externalIdMapperImpl.setCreateDate(getCreateDate());
		externalIdMapperImpl.setModifiedDate(getModifiedDate());
		externalIdMapperImpl.setClassNameId(getClassNameId());
		externalIdMapperImpl.setClassPK(getClassPK());
		externalIdMapperImpl.setExternalSource(getExternalSource());
		externalIdMapperImpl.setExternalId(getExternalId());

		externalIdMapperImpl.resetOriginalValues();

		return externalIdMapperImpl;
	}

	@Override
	public int compareTo(ExternalIdMapper externalIdMapper) {
		long primaryKey = externalIdMapper.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ExternalIdMapper)) {
			return false;
		}

		ExternalIdMapper externalIdMapper = (ExternalIdMapper)obj;

		long primaryKey = externalIdMapper.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		ExternalIdMapperModelImpl externalIdMapperModelImpl = this;

		externalIdMapperModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<ExternalIdMapper> toCacheModel() {
		ExternalIdMapperCacheModel externalIdMapperCacheModel =
			new ExternalIdMapperCacheModel();

		externalIdMapperCacheModel.externalIdMapperId = getExternalIdMapperId();

		externalIdMapperCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			externalIdMapperCacheModel.createDate = createDate.getTime();
		}
		else {
			externalIdMapperCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			externalIdMapperCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			externalIdMapperCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		externalIdMapperCacheModel.classNameId = getClassNameId();

		externalIdMapperCacheModel.classPK = getClassPK();

		externalIdMapperCacheModel.externalSource = getExternalSource();

		externalIdMapperCacheModel.externalId = getExternalId();

		String externalId = externalIdMapperCacheModel.externalId;

		if ((externalId != null) && (externalId.length() == 0)) {
			externalIdMapperCacheModel.externalId = null;
		}

		return externalIdMapperCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ExternalIdMapper, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ExternalIdMapper, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ExternalIdMapper, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ExternalIdMapper)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ExternalIdMapper, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ExternalIdMapper, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ExternalIdMapper, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ExternalIdMapper)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		ExternalIdMapper.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		ExternalIdMapper.class, ModelWrapper.class
	};
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _externalIdMapperId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _classNameId;
	private long _classPK;
	private int _externalSource;
	private String _externalId;
	private ExternalIdMapper _escapedModel;

}